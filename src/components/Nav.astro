---
import NavLink from './NavLink.astro';
import siteConfig from '../data/site-config';

const navLinks = siteConfig.headerNavLinks || [];
---

<nav class="p-4 md:p-6 relative z-20">
    {
        navLinks.length > 0 && (
            <div>
                <button
                    class="
                        menu-toggle w-12 h-12 -ml-1 flex items-center justify-center relative z-30 md:hidden
                        text-red-500 hover:text-red-800"
                    aria-label="Open Menu"
                    aria-expanded="false"
                    aria-controls="menu-items"
                >
                    <span class="menu-toggle-icon w-8 h-[1.5px] rounded-full relative bg-current " />
                </button>
                <ul id="menu-items" class="menu flex gap-6 md:pl-1" transition:persist>
                    {navLinks.map((link) => (
                        <li class="py-0">
                            <NavLink
                                class="block py-1 text-3xl font-bold text-red-500 hover:text-red-600 md:font-normal md:text-gray-700 md:text-lg transition-colors"
                                href={link.href}
                            >
                                {link.text}
                            </NavLink>
                        </li>
                    ))}
                </ul>
            </div>
        )
    }
</nav>

<style>
    @media (max-width: 767px) {
        .menu {
            @apply flex-col gap-1 absolute left-0 w-screen px-3 pt-32 pb-10 z-20 bg-main top-0 -translate-y-full;
            transition:
                opacity 0.25s cubic-bezier(0.4, 0, 0.2, 1) 0.2s,
                transform 0.8s cubic-bezier(0.4, 0, 0.2, 1);
        }
        .menu.is-visible {
            @apply translate-y-0;
        }
        .menu-toggle-icon {
            transition: width 0.1s cubic-bezier(0.4, 0, 0.2, 1) 0.3s;
        }
        .menu-toggle.is-active .menu-toggle-icon {
            @apply w-0;
            transition: width 0.1s cubic-bezier(0.4, 0, 0.2, 1);
        }
        .menu-toggle-icon:before,
        .menu-toggle-icon:after {
            @apply w-8 h-[1.5px] bg-current rounded-full absolute left-1/2 top-0 origin-center -translate-x-1/2;
            content: '';
            transition:
                transform 0.2s cubic-bezier(0.4, 0, 0.2, 1),
                margin 0.2s cubic-bezier(0.4, 0, 0.2, 1) 0.2s;
        }
        .menu-toggle-icon:before {
            @apply -mt-2;
        }
        .menu-toggle-icon:after {
            @apply mt-2;
        }
        .menu-toggle.is-active .menu-toggle-icon:before,
        .menu-toggle.is-active .menu-toggle-icon:after {
            @apply mt-0;
            transition:
                margin 0.2s cubic-bezier(0.4, 0, 0.2, 1) 0.1s,
                transform 0.2s cubic-bezier(0.4, 0, 0.2, 1) 0.3s;
        }
        .menu-toggle.is-active .menu-toggle-icon:before {
            @apply rotate-45;
        }
        .menu-toggle.is-active .menu-toggle-icon:after {
            @apply -rotate-45;
        }
    }
</style>

<script>
    function menuToggle() {
        const menu = document.querySelector('.menu');
        const menuToggleBtn = document.querySelector('.menu-toggle');
        menuToggleBtn?.addEventListener('click', () => {
            const isMenuExpanded = menuToggleBtn.getAttribute('aria-expanded') === 'true';
            menuToggleBtn.classList.toggle('is-active');
            menuToggleBtn.setAttribute('aria-expanded', isMenuExpanded ? 'false' : 'true');
            menuToggleBtn.setAttribute('aria-label', isMenuExpanded ? 'Open Menu' : 'Close Menu');
            menu?.classList.toggle('is-visible');
        });

        // Add event listeners to NavLink elements to close the menu on click
        document.querySelectorAll('.menu a').forEach((link) => {
            link.addEventListener('click', () => {
                menu?.classList.remove('is-visible');
                menuToggleBtn?.classList.remove('is-active');
                menuToggleBtn?.setAttribute('aria-expanded', 'false');
                menuToggleBtn?.setAttribute('aria-label', 'Open Menu');
            });
        });
    }
    menuToggle();
    document.addEventListener('astro:after-swap', menuToggle, { passive: true });
</script>
