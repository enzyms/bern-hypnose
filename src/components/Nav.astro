---
import NavLink from './NavLink.astro';
import siteConfig from '../data/site-config';

const navLinks = siteConfig.headerNavLinks || [];
const hidePickaboo = Astro.props.hidePickaboo;

---

<nav aria-label="Hauptnavigation" class="p-4 md:p-6 relative z-20 min-h-[5rem] w-1/2 w-full">
    {
        navLinks.length > 0 && (
            <div class="fixed md:relative">
                <button
                    class="
                        menu-toggle w-12 h-12 -ml-1 flex items-center justify-center relative z-30 md:hidden
                        text-red-500 hover:text-red-800 relative"
                    aria-label="Open Menu"
                    aria-expanded="false"
                    aria-controls="menu-items"
                >
                    <span class="menu-toggle-icon w-8 h-[1.5px] rounded-full relative bg-current " />
                    <span class="menu-toggle__menu">Menü</span>
                    <span class="menu-toggle__close">Schliessen</span>
                </button>
                <ul id="menu-items" role="menubar" class="menu flex gap-6 md:pl-1" transition:persist>
                    {navLinks.map((link, id) => (
                        <li role="none" class="px-4 md:px-0 md:py-0 relative" key={link.href}>
                            {link.subPages && link.subPages.length > 0 ? (
                                <button
                                    type="button"
                                    role="menuitem"
                                    class="block whitespace-nowrap py-1 md:py-2 text-3xl font-bold text-red-600 hover:text-red-700 md:font-normal md:text-gray-900 md:text-base transition-colors"
                                    aria-haspopup="true"
                                    aria-expanded="false"
                                >
                                    {link.text}
                                </button>
                            ) : (
                                <NavLink
                                    role="menuitem"
                                    data-diamond-position={link.diamondPosition}
                                    class="block whitespace-nowrap py-1 md:py-2 text-3xl font-bold text-red-600 hover:text-red-700 md:font-normal md:text-gray-900 md:text-base transition-colors"
                                    href={link.href}
                                >
                                    {link.text}
                                </NavLink>
                            )}
                            {link.subPages && link.subPages.length > 0 && (
                                <div class="sub-menu ">
                                    {id === 1 ? <div class="hidden md:block py-2 md:px-4 font-bold text-sm text-gray-500">Bereiche</div> : null}
                                    <ul>
                                        {link.subPages.map((subPage) => (
                                            <li key={subPage.href}>
                                                <NavLink class="block py-2 md:px-4 hover:text-red-700" href={subPage.href}>
                                                    {subPage.text}
                                                </NavLink>
                                            </li>
                                        ))}
                                    </ul>
                                    {link.subPagesTopics && link.subPagesTopics.length > 0 && (
                                        <hr class="my-4 border-t border-t-red-500 opacity-30" />
                                        <div class="hidden md:block py-2 md:px-4 font-bold text-sm text-gray-500">Themen</div>
                                        <ul>
                                            {link.subPagesTopics.map((subPage) => (
                                                <li key={subPage.href}>
                                                    <NavLink class="block py-2 md:px-4 hover:text-red-700" href={subPage.href}>
                                                        {subPage.text}
                                                    </NavLink>
                                                </li>
                                            ))}
                                        </ul>
                                    )}
                                    <hr class="md:hidden my-4 border-t border-t-red-500 opacity-30" />
                                </div>
                            )}
                        </li>
                    ))}
                </ul>
            </div>
        )
    }
    { !hidePickaboo && (
        <a href="/termin/" id="pickaboo" class="display-after-scroll">Termin buchen</a>
    )}
    
</nav>

<style>
    .display-after-scroll {
   
        @apply inline-flex items-center justify-center px-6 py-3 text-base leading-tight font-bold text-white bg-red-600 border border-red-600 rounded-full transition hover:bg-red-500 hover:text-red-50 no-underline;

        @apply fixed z-10 bottom-4 left-1/2 transform -translate-x-1/2 translate-y-[150px] opacity-0 transition-all duration-500;

    }
    .display-after-scroll.is-visible {
        @apply translate-y-0 opacity-100;
    }
    
    @media (max-width: 767px) {
        .menu {
            @apply flex-col gap-1 absolute left-0 w-screen px-3 pt-32 pb-10 z-20 bg-main top-0 -translate-y-full;
            transition:
                opacity 0.25s cubic-bezier(0.4, 0, 0.2, 1) 0.2s,
                transform 0.8s cubic-bezier(0.4, 0, 0.2, 1);
        }
        .menu.is-visible {
            @apply translate-y-0;
        }
        .menu-toggle-icon {
            transition: width 0.1s cubic-bezier(0.4, 0, 0.2, 1) 0.3s;
        }
        .menu-toggle.is-active .menu-toggle-icon {
            @apply w-0;
            transition: width 0.1s cubic-bezier(0.4, 0, 0.2, 1);
        }
        .menu-toggle-icon:before,
        .menu-toggle-icon:after {
            @apply w-8 h-[1.5px] bg-current rounded-full absolute left-1/2 top-0 origin-center -translate-x-1/2;
            content: '';
            transition:
                transform 0.2s cubic-bezier(0.4, 0, 0.2, 1),
                margin 0.2s cubic-bezier(0.4, 0, 0.2, 1) 0.2s;
        }
        .menu-toggle-icon:before {
            @apply -mt-2;
        }
        .menu-toggle-icon:after {
            @apply mt-2;
        }
        .menu-toggle.is-active .menu-toggle-icon:before,
        .menu-toggle.is-active .menu-toggle-icon:after {
            @apply mt-0;
            transition:
                margin 0.2s cubic-bezier(0.4, 0, 0.2, 1) 0.1s,
                transform 0.2s cubic-bezier(0.4, 0, 0.2, 1) 0.3s;
        }
        .menu-toggle.is-active .menu-toggle-icon:before {
            @apply rotate-45;
        }
        .menu-toggle.is-active .menu-toggle-icon:after {
            @apply -rotate-45;
        }

        .menu-toggle .menu-toggle__menu {
            @apply !text-sm font-semibold block absolute right-0 translate-x-full transition-all duration-300 ease-in-out;
        }

        .menu-toggle.is-active .menu-toggle__menu {
            @apply opacity-0 translate-y-3;
        }
        .menu-toggle .menu-toggle__close {
            @apply !text-sm font-semibold opacity-0 block absolute right-0 translate-x-full transition-all duration-300 ease-in-out  translate-y-3;
        }

        .menu-toggle.is-active .menu-toggle__close {
            @apply opacity-100  translate-y-0;
        }
    }

    .menu li:has(.sub-menu) > button::after {
        content: '▼';
        font-size: 0.75em;
        @apply inline-block ml-1 text-red-500 hover:text-red-600 transition-transform ease-in-out duration-300;
    }

    /* rotate arrow when open */
    .menu li.is-open > button::after {
        transform: rotate(180deg);
    }

    /* Base (mobile) sub-menu hidden by default, shown when li has .is-open */
    .sub-menu {
        @apply hidden flex-col gap-1 pl-4 mt-2;
    }

    .sub-menu.is-open {
        @apply block;
    }

    /* Desktop (≥768px) keeps previous dropdown styles */
    @media (min-width: 768px) {
        .sub-menu {
            @apply absolute bg-[#eeddda] py-4 shadow-lg rounded-xl w-[200%] opacity-0 invisible delay-200 transition-all duration-300 ease-in-out transform-gpu scale-y-95 origin-top;
        }
        li:focus-within > .sub-menu {
            @apply opacity-100 visible scale-100;
        }
    }

    /* Disable animation helper */
    .menu.no-anim {
        transition: none !important;
    }
</style>

<script>
    function throttle(func, limit) {
        let lastFunc;
        let lastRan;
        return function (...args) {
            const context = this;
            if (!lastRan) {
                func.apply(context, args);
                lastRan = Date.now();
            } else {
                clearTimeout(lastFunc);
                lastFunc = setTimeout(function () {
                    if (Date.now() - lastRan >= limit) {
                        func.apply(context, args);
                        lastRan = Date.now();
                    }
                }, limit - (Date.now() - lastRan));
            }
        };
    }

    function handleScroll() {
        const pickaboo = document.getElementById('pickaboo');
        if (window.scrollY > 200) {
            pickaboo?.classList.add('is-visible');
        } else {
            pickaboo?.classList.remove('is-visible');
        }
    }

    const throttledScroll = throttle(handleScroll, 100);
    window.addEventListener('scroll', throttledScroll);

    document.addEventListener('astro:after-swap', () => {
        window.removeEventListener('scroll', throttledScroll);
        window.addEventListener('scroll', throttledScroll);
    });

    function menuToggle() {
        const menu = document.querySelector('.menu');
        if (!menu) return;

        // Delegated click handler ensures new links/buttons after navigation still work
        if (!window.__navDelegate) {
            document.addEventListener('click', (e) => {
                const navMenu = document.querySelector('.menu');
                const burger = e.target.closest('.menu-toggle');
                if (burger) {
                    const btn = burger; // current clicked
                    const isExpanded = btn.getAttribute('aria-expanded') === 'true';
                    btn.classList.toggle('is-active');
                    btn.setAttribute('aria-expanded', isExpanded ? 'false' : 'true');
                    btn.setAttribute('aria-label', isExpanded ? 'Open Menu' : 'Close Menu');
                    navMenu?.classList.toggle('is-visible');
                    return;
                }

                // Sub-menu toggle buttons
                const subBtn = e.target.closest('.menu > li > button');
                if (subBtn) {
                    const li = subBtn.parentElement;
                    const sub = li?.querySelector('.sub-menu');
                    const isOpen = li?.classList.toggle('is-open');
                    subBtn.setAttribute('aria-expanded', isOpen ? 'true' : 'false');
                    sub?.classList.toggle('is-open');
                    return;
                }

                // Link clicks inside menu
                const link = e.target.closest('.menu a');
                if (link) {
                    const isMobile = window.matchMedia('(max-width: 767px)').matches;
                    if (isMobile) navMenu?.classList.add('no-anim');

                    // close any open sub-menus
                    navMenu?.querySelectorAll('li.is-open').forEach((li) => {
                        li.classList.remove('is-open');
                        li.querySelector('.sub-menu')?.classList.remove('is-open');
                        li.querySelector('button')?.setAttribute('aria-expanded', 'false');
                    });

                    navMenu?.classList.remove('is-visible');
                    const toggleBtn = document.querySelector('.menu-toggle');
                    toggleBtn?.classList.remove('is-active');
                    toggleBtn?.setAttribute('aria-expanded', 'false');
                    toggleBtn?.setAttribute('aria-label', 'Open Menu');

                    if (isMobile) {
                        setTimeout(() => navMenu?.classList.remove('no-anim'), 50);
                    }
                }
            }, { passive: true });
            window.__navDelegate = true;
        }
    }
    menuToggle();
    document.addEventListener('astro:after-swap', menuToggle, { passive: true });
</script>
