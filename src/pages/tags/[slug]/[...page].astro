---
import type { GetStaticPathsOptions, Page } from 'astro';
import { type CollectionEntry, getCollection } from 'astro:content';
import BaseLayout from '../../../layouts/BaseLayout.astro';
import Pagination from '../../../components/Pagination.astro';
import PostPreview from '../../../components/PostPreview.astro';
import siteConfig from '../../../data/site-config';
import Tag from '../../../components/Tag.astro';
import { slugify } from '../../../utils/common-utils';
import ArrowLeft from '../../../icons/ArrowLeft.astro';
import { sortItemsByDateDesc, getAllTags, getPostsByTag } from '../../../utils/data-utils';

export async function getStaticPaths({ paginate }: GetStaticPathsOptions) {
    const posts = (await getCollection('blog')).sort(sortItemsByDateDesc);
    const tags = getAllTags(posts);

    return tags.flatMap((tag) => {
        const filteredPosts = getPostsByTag(posts, tag.slug);
        return paginate(filteredPosts, {
            params: { slug: tag.slug },
            pageSize: siteConfig.postsPerPage || 4
        });
    });
}

type Props = { page: Page<CollectionEntry<'blog'>> };

const { page } = Astro.props;
const blog = page.data;
const params = Astro.params;
const allPosts = await getCollection('blog');
const allTags = getAllTags(allPosts);

// Fetch the tags collection
const allTagEntries = await getCollection('tags');

// Find the current tag entry based on the slug
const currentTagEntry = allTagEntries.find((tag) => tag.slug === params.slug);

// Get the rendered Content component
let ContentComponent = null;
if (currentTagEntry) {
    const { Content } = await currentTagEntry.render();
    ContentComponent = Content;
}

// You can still get currentTag from allTags if needed for other properties
const currentTag = allTags.find((tag) => {
    return tag.slug === params.slug;
});
---

<BaseLayout
    title={`Posts Tagged ${currentTag?.name}`}
    description={`Explore a curated collection of blog posts under ${currentTag?.name}`}
    image={{ src: '/dante-preview.jpg', alt: 'The preview of the site' }}
>
    <a class="flex items-center absolute text-red-500 hover:text-red-700 -mt-8 text-sm font-bold" href="/blog/">
        <ArrowLeft class="w-4 h-4 fill-current" />
        <span>Alle Blogartikel </span>
    </a>
    <h1 class="mb-8 text-3xl leading-tight font-black sm:text-5xl sm:leading-tight">
        {currentTag?.name === 'Hypnose' ? currentTag?.name : `Hypnose und ${currentTag?.name}`}
    </h1>
    <div class="prose">
        {ContentComponent && <ContentComponent />}
    </div>
    <h2 class="text-lg font-bold mt-10">Alle Blogartikel zum Thema «{currentTag?.name}»</h2>

    {blog.map((post) => <PostPreview post={post} class="mb-12 sm:mb-16" />)}
    <Pagination page={page} class="my-16 sm:my-24" />

    <hr class="border-gray-400" />
    <h2 class="text-lg font-bold mt-10">Alle Themen</h2>
    <ul class="flex flex-wrap gap-2 mt-4 mb-10">
        {
            allTags.map((tag) => (
                <Tag href={`/tags/${slugify(tag.slug)}/`}>
                    <span class="sr-only">Hypnose und </span>
                    <span>{tag.name}</span>
                </Tag>
            ))
        }
    </ul>
</BaseLayout>
